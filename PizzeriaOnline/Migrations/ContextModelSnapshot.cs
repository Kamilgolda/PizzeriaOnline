// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PizzeriaOnline.Data;

namespace PizzeriaOnline.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PizzeriaOnline.Models.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Components");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "sos pomidorowy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ser mozzarella"
                        },
                        new
                        {
                            Id = 3,
                            Name = "szynka"
                        },
                        new
                        {
                            Id = 4,
                            Name = "pieczarki"
                        },
                        new
                        {
                            Id = 5,
                            Name = "kukurydza"
                        },
                        new
                        {
                            Id = 6,
                            Name = "salami"
                        },
                        new
                        {
                            Id = 7,
                            Name = "pomidorki koktajlowe"
                        },
                        new
                        {
                            Id = 8,
                            Name = "czarne oliwki"
                        },
                        new
                        {
                            Id = 9,
                            Name = "cebula czerwona"
                        },
                        new
                        {
                            Id = 10,
                            Name = "ser wędzony"
                        },
                        new
                        {
                            Id = 11,
                            Name = "ser pleśniowy"
                        },
                        new
                        {
                            Id = 12,
                            Name = "parmezan"
                        },
                        new
                        {
                            Id = 13,
                            Name = "kurczak"
                        },
                        new
                        {
                            Id = 14,
                            Name = "sos czosnkowy"
                        },
                        new
                        {
                            Id = 15,
                            Name = "pomidor suszony"
                        },
                        new
                        {
                            Id = 16,
                            Name = "szczypiorek"
                        },
                        new
                        {
                            Id = 17,
                            Name = "rukola"
                        });
                });

            modelBuilder.Entity("PizzeriaOnline.Models.ComponentsProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ComponentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ComponentsProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComponentId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            ComponentId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            ComponentId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 4,
                            ComponentId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 5,
                            ComponentId = 3,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 6,
                            ComponentId = 4,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 7,
                            ComponentId = 5,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 8,
                            ComponentId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 9,
                            ComponentId = 2,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 10,
                            ComponentId = 6,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 11,
                            ComponentId = 7,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 12,
                            ComponentId = 8,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 13,
                            ComponentId = 9,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 14,
                            ComponentId = 1,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 15,
                            ComponentId = 2,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 16,
                            ComponentId = 10,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 17,
                            ComponentId = 11,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 18,
                            ComponentId = 12,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 19,
                            ComponentId = 1,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 20,
                            ComponentId = 2,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 21,
                            ComponentId = 13,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 22,
                            ComponentId = 4,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 23,
                            ComponentId = 5,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 24,
                            ComponentId = 1,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 25,
                            ComponentId = 2,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 26,
                            ComponentId = 6,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 27,
                            ComponentId = 11,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 28,
                            ComponentId = 7,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 29,
                            ComponentId = 14,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 30,
                            ComponentId = 13,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 31,
                            ComponentId = 15,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 32,
                            ComponentId = 9,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 33,
                            ComponentId = 16,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 34,
                            ComponentId = 17,
                            ProductId = 7
                        });
                });

            modelBuilder.Entity("PizzeriaOnline.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasDelivery")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PizzeriaOnline.Models.PricesForSizesProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PricesForSizesProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 13.5,
                            ProductId = 1,
                            Size = 0
                        },
                        new
                        {
                            Id = 2,
                            Price = 18.0,
                            ProductId = 1,
                            Size = 1
                        },
                        new
                        {
                            Id = 3,
                            Price = 26.0,
                            ProductId = 1,
                            Size = 2
                        },
                        new
                        {
                            Id = 4,
                            Price = 15.0,
                            ProductId = 2,
                            Size = 0
                        },
                        new
                        {
                            Id = 5,
                            Price = 24.0,
                            ProductId = 2,
                            Size = 1
                        },
                        new
                        {
                            Id = 6,
                            Price = 32.0,
                            ProductId = 2,
                            Size = 2
                        },
                        new
                        {
                            Id = 7,
                            Price = 16.0,
                            ProductId = 3,
                            Size = 0
                        },
                        new
                        {
                            Id = 8,
                            Price = 24.0,
                            ProductId = 3,
                            Size = 1
                        },
                        new
                        {
                            Id = 9,
                            Price = 33.0,
                            ProductId = 3,
                            Size = 2
                        },
                        new
                        {
                            Id = 10,
                            Price = 17.0,
                            ProductId = 4,
                            Size = 0
                        },
                        new
                        {
                            Id = 11,
                            Price = 25.0,
                            ProductId = 4,
                            Size = 1
                        },
                        new
                        {
                            Id = 12,
                            Price = 35.0,
                            ProductId = 4,
                            Size = 2
                        },
                        new
                        {
                            Id = 13,
                            Price = 15.0,
                            ProductId = 5,
                            Size = 0
                        },
                        new
                        {
                            Id = 14,
                            Price = 23.0,
                            ProductId = 5,
                            Size = 1
                        },
                        new
                        {
                            Id = 15,
                            Price = 30.0,
                            ProductId = 5,
                            Size = 2
                        },
                        new
                        {
                            Id = 16,
                            Price = 18.0,
                            ProductId = 6,
                            Size = 0
                        },
                        new
                        {
                            Id = 17,
                            Price = 26.0,
                            ProductId = 6,
                            Size = 1
                        },
                        new
                        {
                            Id = 18,
                            Price = 35.0,
                            ProductId = 6,
                            Size = 2
                        },
                        new
                        {
                            Id = 19,
                            Price = 19.0,
                            ProductId = 7,
                            Size = 0
                        },
                        new
                        {
                            Id = 20,
                            Price = 26.0,
                            ProductId = 7,
                            Size = 1
                        },
                        new
                        {
                            Id = 21,
                            Price = 37.0,
                            ProductId = 7,
                            Size = 2
                        });
                });

            modelBuilder.Entity("PizzeriaOnline.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Availability")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageMimeType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PhotoFile")
                        .HasColumnType("BLOB");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Availability = true,
                            ImageMimeType = "image/jpeg",
                            ImageName = "margherita.jpg",
                            Title = "MARGHERITA"
                        },
                        new
                        {
                            Id = 2,
                            Availability = true,
                            ImageMimeType = "image/jpeg",
                            ImageName = "vesuvio.jpg",
                            Title = "VESUVIO"
                        },
                        new
                        {
                            Id = 3,
                            Availability = true,
                            ImageMimeType = "image/jpeg",
                            ImageName = "salami.jpg",
                            Title = "SALAMI"
                        },
                        new
                        {
                            Id = 4,
                            Availability = true,
                            ImageMimeType = "image/jpeg",
                            ImageName = "formaggi.jpg",
                            Title = "QUATTRO FROMAGGI"
                        },
                        new
                        {
                            Id = 5,
                            Availability = true,
                            ImageMimeType = "image/jpeg",
                            ImageName = "la_nonna.jpg",
                            Title = "LA NONNA"
                        },
                        new
                        {
                            Id = 6,
                            Availability = true,
                            ImageMimeType = "image/jpeg",
                            ImageName = "palermo.jpg",
                            Title = "PALERMO"
                        },
                        new
                        {
                            Id = 7,
                            Availability = true,
                            ImageMimeType = "image/jpeg",
                            ImageName = "italiana.jpg",
                            Title = "ITALIANA"
                        });
                });

            modelBuilder.Entity("PizzeriaOnline.Models.ProductInOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductsInOrders");
                });

            modelBuilder.Entity("PizzeriaOnline.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PizzeriaOnline.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PizzeriaOnline.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzeriaOnline.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PizzeriaOnline.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzeriaOnline.Models.ComponentsProduct", b =>
                {
                    b.HasOne("PizzeriaOnline.Models.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzeriaOnline.Models.Product", null)
                        .WithMany("Components")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("PizzeriaOnline.Models.PricesForSizesProduct", b =>
                {
                    b.HasOne("PizzeriaOnline.Models.Product", null)
                        .WithMany("PricesForSizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzeriaOnline.Models.ProductInOrder", b =>
                {
                    b.HasOne("PizzeriaOnline.Models.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzeriaOnline.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PizzeriaOnline.Models.Product", b =>
                {
                    b.Navigation("Components");

                    b.Navigation("PricesForSizes");
                });
#pragma warning restore 612, 618
        }
    }
}
